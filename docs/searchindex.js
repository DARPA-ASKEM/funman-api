Search.setIndex({"docnames": ["classes", "funman", "funman.examples", "funman.model", "funman.scenario", "index", "packages", "use_cases"], "filenames": ["classes.rst", "funman.rst", "funman.examples.rst", "funman.model.rst", "funman.scenario.rst", "index.rst", "packages.rst", "use_cases.rst"], "titles": ["Class Diagram", "funman package", "funman.examples package", "funman.model package", "funman.scenario package", "Welcome to funman\u2019s documentation!", "Package Diagram", "Use Cases"], "terms": {"1": [0, 1, 2, 3, 4, 5, 6, 7], "2": [0, 1, 2, 3, 4, 5, 6, 7], "The": [1, 4, 7], "implement": 1, "multipl": 1, "simul": [1, 4, 5], "model": [1, 4, 5], "analysi": [1, 4, 7], "method": 1, "current": 1, "includ": [1, 4], "run": [1, 7], "origin": [1, 7], "queri": [1, 2, 3, 4, 7], "result": [1, 4, 7], "paramet": [1, 2, 3, 4, 5], "synthesi": [1, 4, 5], "gener": [1, 4], "feasibl": [1, 4, 7], "valu": [1, 4, 7], "class": [1, 2, 3, 4, 5, 7], "base": [1, 2, 3, 4, 7], "object": [1, 2, 3, 4], "function": [1, 7], "i": [1, 4, 7], "main": [1, 5], "entri": 1, "point": [1, 4, 7], "perform": 1, "solv": [1, 4, 7], "an": [1, 7], "scenario": [1, 7], "analysisscenario": [1, 4], "subject": 1, "set": [1, 7], "configur": [1, 7], "option": [1, 3, 4], "searchconfig": [1, 4, 7], "problem": [1, 4], "none": [1, 3, 4], "analysisscenarioresult": [1, 4], "thi": [1, 3, 4, 7], "Its": 1, "input": [1, 7], "describ": 1, "setup": 1, "techniqu": 1, "return": [1, 4, 7], "which": [1, 4, 7], "compris": 1, "all": [1, 4, 7], "relev": 1, "output": 1, "pertain": 1, "descript": [1, 4], "typic": 1, "algorithm": [1, 4], "appli": 1, "analyz": 1, "default": 1, "data": [1, 4, 7], "statist": [1, 4], "other": 1, "inform": 1, "produc": 1, "type": [1, 4, 7], "exampl": [1, 7], "chime": [1, 7], "encode_time_horizon": [1, 2], "encode_time_horizon_lay": [1, 2], "make_chime_model": [1, 2], "make_chime_queri": [1, 2], "make_chime_vari": [1, 2], "make_dynamics_s1": [1, 2], "make_dynamics_s2": [1, 2], "make_dynamics_s3": [1, 2], "make_model": [1, 2], "cannedmodel": [1, 3], "encodedmodel": [1, 3], "symbol": [1, 3, 7], "timed_copi": [1, 3], "queryl": [1, 3], "querytru": [1, 3], "bilay": [1, 4, 7], "from_json": [1, 3], "to_dot": [1, 3], "to_smtlib": [1, 3], "to_smtlib_timepoint": [1, 3], "bilayeredg": [1, 3], "bilayerfluxnod": [1, 3], "bilayergraph": [1, 3], "bilayermeasur": [1, 3], "bilayermodel": [1, 3], "bilayernegativeedg": [1, 3], "bilayernod": [1, 3], "bilayerpositiveedg": [1, 3], "bilayerstatenod": [1, 3], "chimemodel": [1, 3], "plot": [1, 4], "consist": 1, "consistencyscenario": [1, 4], "encod": [1, 4], "consistencyscenarioresult": [1, 4], "datafram": [1, 4], "parameter_synthesi": 1, "parametersynthesisscenario": [1, 4, 7], "parametersynthesisscenarioresult": [1, 4], "contain": [1, 3, 4, 7], "definit": [1, 3, 4], "defint": 1, "us": [1, 3, 4, 5], "within": 1, "gt": 1, "lh": 1, "rh": 1, "gte": 1, "lt": 1, "lte": 1, "minu": 1, "plu": 1, "parameterspac": [1, 4, 7], "defin": [1, 4, 7], "represent": 1, "space": [1, 4, 7], "can": [1, 7], "featur": 1, "These": [1, 7], "ar": [1, 4, 7], "repres": [1, 3, 7], "collect": 1, "box": 1, "either": [1, 4], "known": 1, "true": [1, 2, 4], "fals": [1, 2, 4], "true_box": 1, "list": [1, 4, 7], "false_box": 1, "static": 1, "compar": [1, 5], "ps1": 1, "ps2": 1, "bool": 1, "construct_all_equ": [1, 7], "p": [1, 7], "intersect": [1, 7], "color": 1, "b": 1, "alpha": 1, "0": [1, 2, 7], "project": 1, "symmetric_differ": 1, "smtcheck": 1, "boxsearch": [1, 4, 7], "drealboxsearch": 1, "expand": 1, "rval": 1, "episod": 1, "boxsearchepisod": 1, "idx": 1, "int": [1, 7], "more_work": 1, "condit": 1, "idle_mutex": 1, "lock": 1, "idle_flag": 1, "event": 1, "handler": 1, "resulthandl": 1, "A": [1, 7], "singl": [1, 7], "process": 1, "evalu": [1, 7], "unknown_box": 1, "queue": 1, "exit": 1, "when": 1, "empti": 1, "For": 1, "each": [1, 7], "check": [1, 4], "whether": [1, 4, 7], "infeas": [1, 4], "If": 1, "both": [1, 7], "split": 1, "two": [1, 7], "ad": 1, "push": 1, "onto": 1, "end": 1, "": 1, "work": 1, "dict": [1, 4], "str": [1, 3, 4], "map": 1, "uniqu": 1, "design": 1, "share": 1, "searchepisod": 1, "creat": [1, 7], "store": 1, "progress": 1, "spawn": 1, "sever": 1, "parallel": 1, "It": [1, 7], "treat": 1, "zeroth": 1, "special": [1, 7], "allow": 1, "initi": 1, "synthes": [1, 4, 7], "final": 1, "abstract": [1, 4], "abc": 1, "drealsearchepisod": 1, "execut": [1, 7], "one": [1, 4, 7], "support": 1, "manag": 1, "syncmanag": 1, "add_fals": 1, "add_false_point": 1, "add_tru": 1, "add_true_point": 1, "add_unknown": 1, "union": [1, 3, 4], "extract_point": 1, "get_box_to_plot": 1, "get_unknown": 1, "initial_box": 1, "initialize_box": 1, "expander_count": 1, "on_iter": 1, "on_start": 1, "interv": 1, "searchstatist": 1, "waitact": 1, "resultcombinedhandl": 1, "behavior": [1, 7], "dure": [1, 7], "check_bounds_disjoint_equ": 1, "check_bounds_disjoint_equal_bool": 1, "contains_point": 1, "equal": [1, 7], "b2": [1, 7], "param_list": 1, "finit": 1, "from_dict": 1, "intersect_two_box": 1, "intersect_two_boxes_selected_paramet": 1, "given": 1, "a0": 1, "a1": 1, "b0": 1, "b1": [1, 7], "thei": 1, "do": 1, "make_box_2d": 1, "along": 1, "max": 1, "width": 1, "dimens": [1, 4], "provid": [1, 7], "pick": 1, "axi": 1, "where": [1, 4, 7], "maxim": 1, "distant": 1, "solut": 1, "separ": 1, "from": [1, 7], "split_bound": 1, "subtract_two_1d_box": 1, "part": 1, "doe": 1, "subtract_two_1d_interv": 1, "symmetric_difference_two_box": 1, "to_dict": 1, "to_smt": 1, "closed_upper_bound": 1, "float": [1, 3], "lb": [1, 3], "ub": [1, 3], "contains_valu": 1, "make_interv": 1, "midpoint": 1, "subtract_two_1d_list": 1, "close": 1, "open": 1, "toler": [1, 7], "01": [1, 2], "queue_timeout": 1, "number_of_process": 1, "8": 1, "wait_timeout": 1, "wait_act": 1, "wait_action_timeout": 1, "05": 1, "read_cach": 1, "episode_typ": 1, "solver": 1, "z3": 1, "decode_labeled_box": 1, "decode_labeled_object": 1, "obj": 1, "decode_labeled_point": 1, "encode_false_box": 1, "encode_false_point": 1, "encode_true_box": 1, "encode_true_point": 1, "encode_unknown_box": 1, "encode_unknown_point": 1, "funmansmtlibscript": 1, "pysmt": 1, "smtlib": 1, "script": 1, "smtlibscript": 1, "funmansmtprint": 1, "printer": 1, "smtprinter": 1, "walker": 1, "tree": 1, "treewalk": 1, "funmansmtdagprint": 1, "smtdagprint": 1, "dag": 1, "dagwalk": 1, "stream": 1, "templat": 1, "def_": 1, "d": 1, "annot": 1, "walk_real_const": 1, "formula": [1, 3, 7], "arg": 1, "kwarg": [1, 4], "node": 1, "handl": 1, "tri": 1, "dynam": [1, 2], "environ": 1, "fail": 1, "unsupportedoperatorerror": 1, "except": 1, "serial": 1, "outstream": 1, "daggifi": 1, "command": 1, "smtlibscript_from_formula": 1, "logic": 1, "smtlibscript_from_formula_list": 1, "init": 2, "horizon": 2, "num_timepoint": 2, "var": 2, "infect": [2, 7], "n": 2, "threshold": [2, 7], "epoch": [2, 7], "20": [2, 7], "21": 2, "60": 2, "population_s": 2, "1002": 2, "infectious_dai": 2, "14": 2, "infected_threshold": [2, 7], "linear": [2, 4], "assign_beta": 2, "interact": 3, "init_valu": 3, "parameter_bound": 3, "name": 3, "inf": 3, "timepoint": 3, "variabl": [3, 7], "next_timepoint": 3, "src": 3, "tgt": 3, "dot": 3, "index": [3, 5], "measur": 3, "config": [3, 4, 5, 7], "subpackag": [4, 5], "capabl": 4, "classmethod": 4, "fnode": 4, "smt_encod": 4, "search": [4, 5, 7], "indic": 4, "ani": [4, 7], "flag": 4, "interpol": 4, "identifi": 4, "particular": 4, "multi": 4, "dimension": 4, "per": 4, "region": 4, "valid": [4, 7], "invalid": 4, "decompos": 4, "case": 5, "translat": 5, "fn": 5, "constant": 5, "time": 5, "depend": 5, "beta": 5, "bi": 5, "layer": 5, "diagram": 5, "packag": 5, "submodul": 5, "math_util": 5, "parameter_spac": 5, "search_episod": 5, "search_util": 5, "util": 5, "modul": 5, "page": 5, "involv": 7, "funman": 7, "reason": 7, "about": 7, "sir": 7, "first": 7, "query_simul": 7, "In": 7, "below": 7, "run_chime_sir": 7, "number": 7, "cross": 7, "construct": 7, "instanc": 7, "queryablegromet": 7, "gromet": 7, "file": 7, "ask": 7, "answer": 7, "correspond": 7, "chime_sir": 7, "exce": 7, "specifi": 7, "onc": 7, "step": 7, "test": 7, "succe": 7, "agre": 7, "respons": 7, "def": 7, "compare_against_chime_fn": 7, "gromet_path": 7, "does_not_cross_threshold": 7, "sim_result": 7, "i_t": 7, "q_sim": 7, "from_gromet_fil": 7, "q_gromet": 7, "f": 7, "foral": 7, "t": 7, "assert": 7, "same": 7, "call": 7, "chime_sir_while_loop": 7, "auto": 7, "json": 7, "130": 7, "formul": 7, "over": 7, "three": 7, "e": 7, "tripl": 7, "modifi": 7, "variant": 7, "entir": 7, "akin": 7, "read": 7, "note": 7, "stub": 7, "more": 7, "found": 7, "determin": 7, "respect": 7, "test_parameter_synthesi": 7, "prepar": 7, "gromet_file_1": 7, "extract": 7, "n_p": 7, "3": 7, "n_dai": 7, "dai": 7, "gromet_org": 7, "gromet_file_2": 7, "modif": 7, "40": 7, "gromet_sub": 7, "some": 7, "get": 7, "ps_b1_b2_b3": 7, "synthesize_paramet": 7, "ps_bc": 7, "ps_eq": 7, "b3": 7, "run_chime_sir_bl": 7, "queryablebilay": 7, "compare_against_chime_bilay": 7, "bilayer_fil": 7, "print": 7, "from_fil": 7, "q_bilay": 7, "chime_sir_dynamics_bilay": 7, "assign": 7, "interfac": 7, "follow": 7, "x": 7, "y": 7, "also": 7, "sai": 7, "5": 7, "10": 7, "12": 7, "remain": 7, "have": 7, "test_parameter_synthesis_2d": 7, "real": 7, "And": 7, "le": 7, "ge": 7, "1e": 7}, "objects": {"": [[1, 0, 0, "-", "funman"]], "funman": [[1, 1, 1, "", "Funman"], [1, 0, 0, "-", "config"], [1, 0, 0, "-", "constants"], [2, 0, 0, "-", "examples"], [1, 3, 1, "", "main"], [1, 0, 0, "-", "math_utils"], [3, 0, 0, "-", "model"], [1, 0, 0, "-", "parameter_space"], [4, 0, 0, "-", "scenario"], [1, 0, 0, "-", "search"], [1, 0, 0, "-", "search_episode"], [1, 0, 0, "-", "search_utils"], [1, 0, 0, "-", "util"]], "funman.Funman": [[1, 2, 1, "", "solve"]], "funman.config": [[1, 1, 1, "", "Config"]], "funman.examples": [[2, 0, 0, "-", "chime"]], "funman.examples.chime": [[2, 1, 1, "", "CHIME"]], "funman.examples.chime.CHIME": [[2, 2, 1, "", "encode_time_horizon"], [2, 2, 1, "", "encode_time_horizon_layered"], [2, 2, 1, "", "make_chime_model"], [2, 2, 1, "", "make_chime_query"], [2, 2, 1, "", "make_chime_variables"], [2, 2, 1, "", "make_dynamics_s1"], [2, 2, 1, "", "make_dynamics_s2"], [2, 2, 1, "", "make_dynamics_s3"], [2, 2, 1, "", "make_model"]], "funman.math_utils": [[1, 3, 1, "", "gt"], [1, 3, 1, "", "gte"], [1, 3, 1, "", "lt"], [1, 3, 1, "", "lte"], [1, 3, 1, "", "minus"], [1, 3, 1, "", "plus"]], "funman.model": [[3, 1, 1, "", "CannedModel"], [3, 1, 1, "", "EncodedModel"], [3, 1, 1, "", "Model"], [3, 1, 1, "", "Parameter"], [3, 1, 1, "", "Query"], [3, 1, 1, "", "QueryLE"], [3, 1, 1, "", "QueryTrue"], [3, 0, 0, "-", "bilayer"], [3, 0, 0, "-", "chime"]], "funman.model.Parameter": [[3, 2, 1, "", "symbol"], [3, 2, 1, "", "timed_copy"]], "funman.model.bilayer": [[3, 1, 1, "", "Bilayer"], [3, 1, 1, "", "BilayerEdge"], [3, 1, 1, "", "BilayerFluxNode"], [3, 1, 1, "", "BilayerGraph"], [3, 1, 1, "", "BilayerMeasurement"], [3, 1, 1, "", "BilayerModel"], [3, 1, 1, "", "BilayerNegativeEdge"], [3, 1, 1, "", "BilayerNode"], [3, 1, 1, "", "BilayerPositiveEdge"], [3, 1, 1, "", "BilayerStateNode"]], "funman.model.bilayer.Bilayer": [[3, 2, 1, "", "from_json"], [3, 2, 1, "", "to_dot"], [3, 2, 1, "", "to_smtlib"], [3, 2, 1, "", "to_smtlib_timepoint"]], "funman.model.bilayer.BilayerEdge": [[3, 2, 1, "", "to_dot"], [3, 2, 1, "", "to_smtlib"]], "funman.model.bilayer.BilayerMeasurement": [[3, 2, 1, "", "from_json"], [3, 2, 1, "", "to_dot"]], "funman.model.bilayer.BilayerNegativeEdge": [[3, 2, 1, "", "to_dot"], [3, 2, 1, "", "to_smtlib"]], "funman.model.bilayer.BilayerNode": [[3, 2, 1, "", "to_dot"], [3, 2, 1, "", "to_smtlib"]], "funman.model.bilayer.BilayerPositiveEdge": [[3, 2, 1, "", "to_smtlib"]], "funman.model.chime": [[3, 1, 1, "", "ChimeModel"]], "funman.parameter_space": [[1, 1, 1, "", "ParameterSpace"]], "funman.parameter_space.ParameterSpace": [[1, 2, 1, "", "compare"], [1, 2, 1, "", "construct_all_equal"], [1, 2, 1, "", "intersect"], [1, 2, 1, "", "plot"], [1, 2, 1, "", "project"], [1, 2, 1, "", "symmetric_difference"]], "funman.scenario": [[4, 1, 1, "", "AnalysisScenario"], [4, 1, 1, "", "AnalysisScenarioResult"], [4, 0, 0, "-", "consistency"], [4, 0, 0, "-", "parameter_synthesis"]], "funman.scenario.AnalysisScenario": [[4, 2, 1, "", "simulate"], [4, 2, 1, "", "solve"]], "funman.scenario.AnalysisScenarioResult": [[4, 2, 1, "", "plot"]], "funman.scenario.consistency": [[4, 1, 1, "", "ConsistencyScenario"], [4, 1, 1, "", "ConsistencyScenarioResult"]], "funman.scenario.consistency.ConsistencyScenario": [[4, 2, 1, "", "encode"], [4, 2, 1, "", "solve"]], "funman.scenario.consistency.ConsistencyScenarioResult": [[4, 2, 1, "", "dataframe"], [4, 2, 1, "", "parameters"], [4, 2, 1, "", "plot"]], "funman.scenario.parameter_synthesis": [[4, 1, 1, "", "ParameterSynthesisScenario"], [4, 1, 1, "", "ParameterSynthesisScenarioResult"]], "funman.scenario.parameter_synthesis.ParameterSynthesisScenario": [[4, 2, 1, "", "encode"], [4, 2, 1, "", "solve"]], "funman.search": [[1, 1, 1, "", "BoxSearch"], [1, 1, 1, "", "DrealBoxSearch"], [1, 1, 1, "", "SMTCheck"], [1, 1, 1, "", "Search"]], "funman.search.BoxSearch": [[1, 2, 1, "", "expand"], [1, 2, 1, "", "search"], [1, 2, 1, "", "split"]], "funman.search.DrealBoxSearch": [[1, 2, 1, "", "expand"]], "funman.search.SMTCheck": [[1, 2, 1, "", "expand"], [1, 2, 1, "", "search"]], "funman.search.Search": [[1, 2, 1, "", "search"]], "funman.search_episode": [[1, 1, 1, "", "BoxSearchEpisode"], [1, 1, 1, "", "DRealSearchEpisode"], [1, 1, 1, "", "SearchEpisode"]], "funman.search_episode.BoxSearchEpisode": [[1, 2, 1, "", "add_false"], [1, 2, 1, "", "add_false_point"], [1, 2, 1, "", "add_true"], [1, 2, 1, "", "add_true_point"], [1, 2, 1, "", "add_unknown"], [1, 2, 1, "", "extract_point"], [1, 2, 1, "", "get_box_to_plot"], [1, 2, 1, "", "get_unknown"], [1, 2, 1, "", "initial_box"], [1, 2, 1, "", "initialize_boxes"], [1, 2, 1, "", "on_iteration"], [1, 2, 1, "", "on_start"]], "funman.search_utils": [[1, 1, 1, "", "Box"], [1, 1, 1, "", "Interval"], [1, 1, 1, "", "Point"], [1, 1, 1, "", "ResultCombinedHandler"], [1, 1, 1, "", "ResultHandler"], [1, 1, 1, "", "SearchConfig"], [1, 1, 1, "", "SearchStatistics"], [1, 1, 1, "", "WaitAction"], [1, 3, 1, "", "decode_labeled_box"], [1, 3, 1, "", "decode_labeled_object"], [1, 3, 1, "", "decode_labeled_point"], [1, 3, 1, "", "encode_false_box"], [1, 3, 1, "", "encode_false_point"], [1, 3, 1, "", "encode_true_box"], [1, 3, 1, "", "encode_true_point"], [1, 3, 1, "", "encode_unknown_box"], [1, 3, 1, "", "encode_unknown_point"]], "funman.search_utils.Box": [[1, 2, 1, "", "check_bounds_disjoint_equal"], [1, 2, 1, "", "check_bounds_disjoint_equal_bool"], [1, 2, 1, "", "contains"], [1, 2, 1, "", "contains_point"], [1, 2, 1, "", "equal"], [1, 2, 1, "", "finite"], [1, 2, 1, "", "from_dict"], [1, 2, 1, "", "intersect_two_boxes"], [1, 2, 1, "", "intersect_two_boxes_selected_parameters"], [1, 2, 1, "", "intersection"], [1, 2, 1, "", "intersects"], [1, 2, 1, "", "make_box_2d"], [1, 2, 1, "", "split"], [1, 2, 1, "", "split_bounds"], [1, 2, 1, "", "subtract_two_1d_boxes"], [1, 2, 1, "", "subtract_two_1d_intervals"], [1, 2, 1, "", "symmetric_difference_two_boxes"], [1, 2, 1, "", "to_dict"], [1, 2, 1, "", "to_smt"], [1, 2, 1, "", "union"], [1, 2, 1, "", "width"]], "funman.search_utils.Interval": [[1, 2, 1, "", "contains"], [1, 2, 1, "", "contains_value"], [1, 2, 1, "", "finite"], [1, 2, 1, "", "from_dict"], [1, 2, 1, "", "intersection"], [1, 2, 1, "", "intersects"], [1, 2, 1, "", "make_interval"], [1, 2, 1, "", "midpoint"], [1, 2, 1, "", "subtract_two_1d_intervals"], [1, 2, 1, "", "subtract_two_1d_lists"], [1, 2, 1, "", "to_dict"], [1, 2, 1, "", "to_smt"], [1, 2, 1, "", "union"], [1, 2, 1, "", "width"]], "funman.search_utils.Point": [[1, 2, 1, "", "from_dict"], [1, 2, 1, "", "to_dict"], [1, 2, 1, "", "to_smt"]], "funman.search_utils.ResultCombinedHandler": [[1, 2, 1, "", "close"], [1, 2, 1, "", "open"], [1, 2, 1, "", "process"]], "funman.search_utils.ResultHandler": [[1, 2, 1, "", "close"], [1, 2, 1, "", "open"], [1, 2, 1, "", "process"]], "funman.search_utils.WaitAction": [[1, 2, 1, "", "run"]], "funman.util": [[1, 1, 1, "", "FUNMANSmtDagPrinter"], [1, 1, 1, "", "FUNMANSmtLibScript"], [1, 1, 1, "", "FUNMANSmtPrinter"], [1, 3, 1, "", "smtlibscript_from_formula"], [1, 3, 1, "", "smtlibscript_from_formula_list"]], "funman.util.FUNMANSmtDagPrinter": [[1, 2, 1, "", "walk_real_constant"]], "funman.util.FUNMANSmtLibScript": [[1, 2, 1, "", "serialize"]], "funman.util.FUNMANSmtPrinter": [[1, 2, 1, "", "walk_real_constant"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"class": 0, "diagram": [0, 6], "funman": [1, 2, 3, 4, 5], "packag": [1, 2, 3, 4, 6], "subpackag": 1, "submodul": [1, 2, 3, 4], "config": 1, "constant": [1, 7], "math_util": 1, "parameter_spac": 1, "search": 1, "search_episod": 1, "search_util": 1, "util": 1, "exampl": 2, "chime": [2, 3], "model": [3, 7], "bilay": 3, "scenario": 4, "consist": 4, "parameter_synthesi": 4, "welcom": 5, "": 5, "document": 5, "content": 5, "indic": 5, "tabl": 5, "us": 7, "case": 7, "compar": 7, "translat": 7, "fn": 7, "simul": 7, "time": 7, "depend": 7, "beta": 7, "bi": 7, "layer": 7, "paramet": 7, "synthesi": 7}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Class Diagram": [[0, "class-diagram"]], "funman package": [[1, "module-funman"]], "Subpackages": [[1, "subpackages"]], "Submodules": [[1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"]], "funman.config": [[1, "funman-config"]], "funman.constants": [[1, "funman-constants"]], "funman.math_utils": [[1, "funman-math-utils"]], "funman.parameter_space": [[1, "funman-parameter-space"]], "funman.search": [[1, "funman-search"]], "funman.search_episode": [[1, "funman-search-episode"]], "funman.search_utils": [[1, "funman-search-utils"]], "funman.util": [[1, "funman-util"]], "funman.examples package": [[2, "module-funman.examples"]], "funman.examples.chime": [[2, "funman-examples-chime"]], "funman.model package": [[3, "module-funman.model"]], "funman.model.bilayer": [[3, "funman-model-bilayer"]], "funman.model.chime": [[3, "funman-model-chime"]], "funman.scenario package": [[4, "module-funman.scenario"]], "funman.scenario.consistency": [[4, "funman-scenario-consistency"]], "funman.scenario.parameter_synthesis": [[4, "funman-scenario-parameter-synthesis"]], "Welcome to funman\u2019s documentation!": [[5, "welcome-to-funman-s-documentation"]], "Contents:": [[5, null]], "Indices and tables": [[5, "indices-and-tables"]], "Package Diagram": [[6, "package-diagram"]], "Use Cases": [[7, "use-cases"]], "Compare Translated FN to Simulator:": [[7, "compare-translated-fn-to-simulator"]], "Compare Constant and Time-dependent Betas:": [[7, "compare-constant-and-time-dependent-betas"]], "Compare Bi-Layer Model to Bi-Layer Simulator:": [[7, "compare-bi-layer-model-to-bi-layer-simulator"]], "Parameter Synthesis": [[7, "parameter-synthesis"]]}, "indexentries": {"box (class in funman.search_utils)": [[1, "funman.search_utils.Box"]], "boxsearch (class in funman.search)": [[1, "funman.search.BoxSearch"]], "boxsearchepisode (class in funman.search_episode)": [[1, "funman.search_episode.BoxSearchEpisode"]], "config (class in funman.config)": [[1, "funman.config.Config"]], "drealsearchepisode (class in funman.search_episode)": [[1, "funman.search_episode.DRealSearchEpisode"]], "drealboxsearch (class in funman.search)": [[1, "funman.search.DrealBoxSearch"]], "funmansmtdagprinter (class in funman.util)": [[1, "funman.util.FUNMANSmtDagPrinter"]], "funmansmtlibscript (class in funman.util)": [[1, "funman.util.FUNMANSmtLibScript"]], "funmansmtprinter (class in funman.util)": [[1, "funman.util.FUNMANSmtPrinter"]], "funman (class in funman)": [[1, "funman.Funman"]], "interval (class in funman.search_utils)": [[1, "funman.search_utils.Interval"]], "parameterspace (class in funman.parameter_space)": [[1, "funman.parameter_space.ParameterSpace"]], "point (class in funman.search_utils)": [[1, "funman.search_utils.Point"]], "resultcombinedhandler (class in funman.search_utils)": [[1, "funman.search_utils.ResultCombinedHandler"]], "resulthandler (class in funman.search_utils)": [[1, "funman.search_utils.ResultHandler"]], "smtcheck (class in funman.search)": [[1, "funman.search.SMTCheck"]], "search (class in funman.search)": [[1, "funman.search.Search"]], "searchconfig (class in funman.search_utils)": [[1, "funman.search_utils.SearchConfig"]], "searchepisode (class in funman.search_episode)": [[1, "funman.search_episode.SearchEpisode"]], "searchstatistics (class in funman.search_utils)": [[1, "funman.search_utils.SearchStatistics"]], "waitaction (class in funman.search_utils)": [[1, "funman.search_utils.WaitAction"]], "add_false() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.add_false"]], "add_false_point() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.add_false_point"]], "add_true() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.add_true"]], "add_true_point() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.add_true_point"]], "add_unknown() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.add_unknown"]], "check_bounds_disjoint_equal() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.check_bounds_disjoint_equal"]], "check_bounds_disjoint_equal_bool() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.check_bounds_disjoint_equal_bool"]], "close() (funman.search_utils.resultcombinedhandler method)": [[1, "funman.search_utils.ResultCombinedHandler.close"]], "close() (funman.search_utils.resulthandler method)": [[1, "funman.search_utils.ResultHandler.close"]], "compare() (funman.parameter_space.parameterspace static method)": [[1, "funman.parameter_space.ParameterSpace.compare"]], "construct_all_equal() (funman.parameter_space.parameterspace static method)": [[1, "funman.parameter_space.ParameterSpace.construct_all_equal"]], "contains() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.contains"]], "contains() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.contains"]], "contains_point() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.contains_point"]], "contains_value() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.contains_value"]], "decode_labeled_box() (in module funman.search_utils)": [[1, "funman.search_utils.decode_labeled_box"]], "decode_labeled_object() (in module funman.search_utils)": [[1, "funman.search_utils.decode_labeled_object"]], "decode_labeled_point() (in module funman.search_utils)": [[1, "funman.search_utils.decode_labeled_point"]], "encode_false_box() (in module funman.search_utils)": [[1, "funman.search_utils.encode_false_box"]], "encode_false_point() (in module funman.search_utils)": [[1, "funman.search_utils.encode_false_point"]], "encode_true_box() (in module funman.search_utils)": [[1, "funman.search_utils.encode_true_box"]], "encode_true_point() (in module funman.search_utils)": [[1, "funman.search_utils.encode_true_point"]], "encode_unknown_box() (in module funman.search_utils)": [[1, "funman.search_utils.encode_unknown_box"]], "encode_unknown_point() (in module funman.search_utils)": [[1, "funman.search_utils.encode_unknown_point"]], "equal() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.equal"]], "expand() (funman.search.boxsearch method)": [[1, "funman.search.BoxSearch.expand"]], "expand() (funman.search.drealboxsearch method)": [[1, "funman.search.DrealBoxSearch.expand"]], "expand() (funman.search.smtcheck method)": [[1, "funman.search.SMTCheck.expand"]], "extract_point() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.extract_point"]], "finite() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.finite"]], "finite() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.finite"]], "from_dict() (funman.search_utils.box static method)": [[1, "funman.search_utils.Box.from_dict"]], "from_dict() (funman.search_utils.interval static method)": [[1, "funman.search_utils.Interval.from_dict"]], "from_dict() (funman.search_utils.point static method)": [[1, "funman.search_utils.Point.from_dict"]], "funman": [[1, "module-funman"]], "funman.config": [[1, "module-funman.config"]], "funman.constants": [[1, "module-funman.constants"]], "funman.math_utils": [[1, "module-funman.math_utils"]], "funman.parameter_space": [[1, "module-funman.parameter_space"]], "funman.search": [[1, "module-funman.search"]], "funman.search_episode": [[1, "module-funman.search_episode"]], "funman.search_utils": [[1, "module-funman.search_utils"]], "funman.util": [[1, "module-funman.util"]], "get_box_to_plot() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.get_box_to_plot"]], "get_unknown() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.get_unknown"]], "gt() (in module funman.math_utils)": [[1, "funman.math_utils.gt"]], "gte() (in module funman.math_utils)": [[1, "funman.math_utils.gte"]], "initial_box() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.initial_box"]], "initialize_boxes() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.initialize_boxes"]], "intersect() (funman.parameter_space.parameterspace static method)": [[1, "funman.parameter_space.ParameterSpace.intersect"]], "intersect_two_boxes() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.intersect_two_boxes"]], "intersect_two_boxes_selected_parameters() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.intersect_two_boxes_selected_parameters"]], "intersection() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.intersection"]], "intersection() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.intersection"]], "intersects() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.intersects"]], "intersects() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.intersects"]], "lt() (in module funman.math_utils)": [[1, "funman.math_utils.lt"]], "lte() (in module funman.math_utils)": [[1, "funman.math_utils.lte"]], "main() (in module funman)": [[1, "funman.main"]], "make_box_2d() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.make_box_2d"]], "make_interval() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.make_interval"]], "midpoint() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.midpoint"]], "minus() (in module funman.math_utils)": [[1, "funman.math_utils.minus"]], "module": [[1, "module-funman"], [1, "module-funman.config"], [1, "module-funman.constants"], [1, "module-funman.math_utils"], [1, "module-funman.parameter_space"], [1, "module-funman.search"], [1, "module-funman.search_episode"], [1, "module-funman.search_utils"], [1, "module-funman.util"], [2, "module-funman.examples"], [2, "module-funman.examples.chime"], [3, "module-funman.model"], [3, "module-funman.model.bilayer"], [3, "module-funman.model.chime"], [4, "module-funman.scenario"], [4, "module-funman.scenario.consistency"], [4, "module-funman.scenario.parameter_synthesis"]], "on_iteration() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.on_iteration"]], "on_start() (funman.search_episode.boxsearchepisode method)": [[1, "funman.search_episode.BoxSearchEpisode.on_start"]], "open() (funman.search_utils.resultcombinedhandler method)": [[1, "funman.search_utils.ResultCombinedHandler.open"]], "open() (funman.search_utils.resulthandler method)": [[1, "funman.search_utils.ResultHandler.open"]], "plot() (funman.parameter_space.parameterspace method)": [[1, "funman.parameter_space.ParameterSpace.plot"]], "plus() (in module funman.math_utils)": [[1, "funman.math_utils.plus"]], "process() (funman.search_utils.resultcombinedhandler method)": [[1, "funman.search_utils.ResultCombinedHandler.process"]], "process() (funman.search_utils.resulthandler method)": [[1, "funman.search_utils.ResultHandler.process"]], "project() (funman.parameter_space.parameterspace static method)": [[1, "funman.parameter_space.ParameterSpace.project"]], "run() (funman.search_utils.waitaction method)": [[1, "funman.search_utils.WaitAction.run"]], "search() (funman.search.boxsearch method)": [[1, "funman.search.BoxSearch.search"]], "search() (funman.search.smtcheck method)": [[1, "funman.search.SMTCheck.search"]], "search() (funman.search.search method)": [[1, "funman.search.Search.search"]], "serialize() (funman.util.funmansmtlibscript method)": [[1, "funman.util.FUNMANSmtLibScript.serialize"]], "smtlibscript_from_formula() (in module funman.util)": [[1, "funman.util.smtlibscript_from_formula"]], "smtlibscript_from_formula_list() (in module funman.util)": [[1, "funman.util.smtlibscript_from_formula_list"]], "solve() (funman.funman method)": [[1, "funman.Funman.solve"]], "split() (funman.search.boxsearch method)": [[1, "funman.search.BoxSearch.split"]], "split() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.split"]], "split_bounds() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.split_bounds"]], "subtract_two_1d_boxes() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.subtract_two_1d_boxes"]], "subtract_two_1d_intervals() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.subtract_two_1d_intervals"]], "subtract_two_1d_intervals() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.subtract_two_1d_intervals"]], "subtract_two_1d_lists() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.subtract_two_1d_lists"]], "symmetric_difference() (funman.parameter_space.parameterspace static method)": [[1, "funman.parameter_space.ParameterSpace.symmetric_difference"]], "symmetric_difference_two_boxes() (funman.search_utils.box static method)": [[1, "funman.search_utils.Box.symmetric_difference_two_boxes"]], "to_dict() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.to_dict"]], "to_dict() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.to_dict"]], "to_dict() (funman.search_utils.point method)": [[1, "funman.search_utils.Point.to_dict"]], "to_smt() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.to_smt"]], "to_smt() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.to_smt"]], "to_smt() (funman.search_utils.point method)": [[1, "funman.search_utils.Point.to_smt"]], "union() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.union"]], "union() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.union"]], "walk_real_constant() (funman.util.funmansmtdagprinter method)": [[1, "funman.util.FUNMANSmtDagPrinter.walk_real_constant"]], "walk_real_constant() (funman.util.funmansmtprinter method)": [[1, "funman.util.FUNMANSmtPrinter.walk_real_constant"]], "width() (funman.search_utils.box method)": [[1, "funman.search_utils.Box.width"]], "width() (funman.search_utils.interval method)": [[1, "funman.search_utils.Interval.width"]], "chime (class in funman.examples.chime)": [[2, "funman.examples.chime.CHIME"]], "encode_time_horizon() (funman.examples.chime.chime method)": [[2, "funman.examples.chime.CHIME.encode_time_horizon"]], "encode_time_horizon_layered() (funman.examples.chime.chime method)": [[2, "funman.examples.chime.CHIME.encode_time_horizon_layered"]], "funman.examples": [[2, "module-funman.examples"]], "funman.examples.chime": [[2, "module-funman.examples.chime"]], "make_chime_model() (funman.examples.chime.chime method)": [[2, "funman.examples.chime.CHIME.make_chime_model"]], "make_chime_query() (funman.examples.chime.chime method)": [[2, "funman.examples.chime.CHIME.make_chime_query"]], "make_chime_variables() (funman.examples.chime.chime method)": [[2, "funman.examples.chime.CHIME.make_chime_variables"]], "make_dynamics_s1() (funman.examples.chime.chime method)": [[2, "funman.examples.chime.CHIME.make_dynamics_s1"]], "make_dynamics_s2() (funman.examples.chime.chime method)": [[2, "funman.examples.chime.CHIME.make_dynamics_s2"]], "make_dynamics_s3() (funman.examples.chime.chime method)": [[2, "funman.examples.chime.CHIME.make_dynamics_s3"]], "make_model() (funman.examples.chime.chime method)": [[2, "funman.examples.chime.CHIME.make_model"]], "bilayer (class in funman.model.bilayer)": [[3, "funman.model.bilayer.Bilayer"]], "bilayeredge (class in funman.model.bilayer)": [[3, "funman.model.bilayer.BilayerEdge"]], "bilayerfluxnode (class in funman.model.bilayer)": [[3, "funman.model.bilayer.BilayerFluxNode"]], "bilayergraph (class in funman.model.bilayer)": [[3, "funman.model.bilayer.BilayerGraph"]], "bilayermeasurement (class in funman.model.bilayer)": [[3, "funman.model.bilayer.BilayerMeasurement"]], "bilayermodel (class in funman.model.bilayer)": [[3, "funman.model.bilayer.BilayerModel"]], "bilayernegativeedge (class in funman.model.bilayer)": [[3, "funman.model.bilayer.BilayerNegativeEdge"]], "bilayernode (class in funman.model.bilayer)": [[3, "funman.model.bilayer.BilayerNode"]], "bilayerpositiveedge (class in funman.model.bilayer)": [[3, "funman.model.bilayer.BilayerPositiveEdge"]], "bilayerstatenode (class in funman.model.bilayer)": [[3, "funman.model.bilayer.BilayerStateNode"]], "cannedmodel (class in funman.model)": [[3, "funman.model.CannedModel"]], "chimemodel (class in funman.model.chime)": [[3, "funman.model.chime.ChimeModel"]], "encodedmodel (class in funman.model)": [[3, "funman.model.EncodedModel"]], "model (class in funman.model)": [[3, "funman.model.Model"]], "parameter (class in funman.model)": [[3, "funman.model.Parameter"]], "query (class in funman.model)": [[3, "funman.model.Query"]], "queryle (class in funman.model)": [[3, "funman.model.QueryLE"]], "querytrue (class in funman.model)": [[3, "funman.model.QueryTrue"]], "from_json() (funman.model.bilayer.bilayer method)": [[3, "funman.model.bilayer.Bilayer.from_json"]], "from_json() (funman.model.bilayer.bilayermeasurement method)": [[3, "funman.model.bilayer.BilayerMeasurement.from_json"]], "funman.model": [[3, "module-funman.model"]], "funman.model.bilayer": [[3, "module-funman.model.bilayer"]], "funman.model.chime": [[3, "module-funman.model.chime"]], "symbol() (funman.model.parameter method)": [[3, "funman.model.Parameter.symbol"]], "timed_copy() (funman.model.parameter method)": [[3, "funman.model.Parameter.timed_copy"]], "to_dot() (funman.model.bilayer.bilayer method)": [[3, "funman.model.bilayer.Bilayer.to_dot"]], "to_dot() (funman.model.bilayer.bilayeredge method)": [[3, "funman.model.bilayer.BilayerEdge.to_dot"]], "to_dot() (funman.model.bilayer.bilayermeasurement method)": [[3, "funman.model.bilayer.BilayerMeasurement.to_dot"]], "to_dot() (funman.model.bilayer.bilayernegativeedge method)": [[3, "funman.model.bilayer.BilayerNegativeEdge.to_dot"]], "to_dot() (funman.model.bilayer.bilayernode method)": [[3, "funman.model.bilayer.BilayerNode.to_dot"]], "to_smtlib() (funman.model.bilayer.bilayer method)": [[3, "funman.model.bilayer.Bilayer.to_smtlib"]], "to_smtlib() (funman.model.bilayer.bilayeredge method)": [[3, "funman.model.bilayer.BilayerEdge.to_smtlib"]], "to_smtlib() (funman.model.bilayer.bilayernegativeedge method)": [[3, "funman.model.bilayer.BilayerNegativeEdge.to_smtlib"]], "to_smtlib() (funman.model.bilayer.bilayernode method)": [[3, "funman.model.bilayer.BilayerNode.to_smtlib"]], "to_smtlib() (funman.model.bilayer.bilayerpositiveedge method)": [[3, "funman.model.bilayer.BilayerPositiveEdge.to_smtlib"]], "to_smtlib_timepoint() (funman.model.bilayer.bilayer method)": [[3, "funman.model.bilayer.Bilayer.to_smtlib_timepoint"]], "analysisscenario (class in funman.scenario)": [[4, "funman.scenario.AnalysisScenario"]], "analysisscenarioresult (class in funman.scenario)": [[4, "funman.scenario.AnalysisScenarioResult"]], "consistencyscenario (class in funman.scenario.consistency)": [[4, "funman.scenario.consistency.ConsistencyScenario"]], "consistencyscenarioresult (class in funman.scenario.consistency)": [[4, "funman.scenario.consistency.ConsistencyScenarioResult"]], "parametersynthesisscenario (class in funman.scenario.parameter_synthesis)": [[4, "funman.scenario.parameter_synthesis.ParameterSynthesisScenario"]], "parametersynthesisscenarioresult (class in funman.scenario.parameter_synthesis)": [[4, "funman.scenario.parameter_synthesis.ParameterSynthesisScenarioResult"]], "dataframe() (funman.scenario.consistency.consistencyscenarioresult method)": [[4, "funman.scenario.consistency.ConsistencyScenarioResult.dataframe"]], "encode() (funman.scenario.consistency.consistencyscenario method)": [[4, "funman.scenario.consistency.ConsistencyScenario.encode"]], "encode() (funman.scenario.parameter_synthesis.parametersynthesisscenario method)": [[4, "funman.scenario.parameter_synthesis.ParameterSynthesisScenario.encode"]], "funman.scenario": [[4, "module-funman.scenario"]], "funman.scenario.consistency": [[4, "module-funman.scenario.consistency"]], "funman.scenario.parameter_synthesis": [[4, "module-funman.scenario.parameter_synthesis"]], "parameters() (funman.scenario.consistency.consistencyscenarioresult method)": [[4, "funman.scenario.consistency.ConsistencyScenarioResult.parameters"]], "plot() (funman.scenario.analysisscenarioresult class method)": [[4, "funman.scenario.AnalysisScenarioResult.plot"]], "plot() (funman.scenario.consistency.consistencyscenarioresult method)": [[4, "funman.scenario.consistency.ConsistencyScenarioResult.plot"]], "simulate() (funman.scenario.analysisscenario class method)": [[4, "funman.scenario.AnalysisScenario.simulate"]], "solve() (funman.scenario.analysisscenario class method)": [[4, "funman.scenario.AnalysisScenario.solve"]], "solve() (funman.scenario.consistency.consistencyscenario method)": [[4, "funman.scenario.consistency.ConsistencyScenario.solve"]], "solve() (funman.scenario.parameter_synthesis.parametersynthesisscenario method)": [[4, "funman.scenario.parameter_synthesis.ParameterSynthesisScenario.solve"]]}})