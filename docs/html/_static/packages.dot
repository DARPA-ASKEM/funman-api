digraph "packages" {
rankdir=BT
charset="utf-8"
"funman" [color="black", label=<funman>, shape="box", style="solid"];
"funman._version" [color="black", label=<funman._version>, shape="box", style="solid"];
"funman.api" [color="black", label=<funman.api>, shape="box", style="solid"];
"funman.api.api" [color="black", label=<funman.api.api>, shape="box", style="solid"];
"funman.api.client" [color="black", label=<funman.api.client>, shape="box", style="solid"];
"funman.api.server" [color="black", label=<funman.api.server>, shape="box", style="solid"];
"funman.constants" [color="black", label=<funman.constants>, shape="box", style="solid"];
"funman.funman" [color="black", label=<funman.funman>, shape="box", style="solid"];
"funman.model" [color="black", label=<funman.model>, shape="box", style="solid"];
"funman.model.bilayer" [color="black", label=<funman.model.bilayer>, shape="box", style="solid"];
"funman.model.decapode" [color="black", label=<funman.model.decapode>, shape="box", style="solid"];
"funman.model.encoded" [color="black", label=<funman.model.encoded>, shape="box", style="solid"];
"funman.model.gromet" [color="black", label=<funman.model.gromet>, shape="box", style="solid"];
"funman.model.model" [color="black", label=<funman.model.model>, shape="box", style="solid"];
"funman.model.query" [color="black", label=<funman.model.query>, shape="box", style="solid"];
"funman.model.simulator" [color="black", label=<funman.model.simulator>, shape="box", style="solid"];
"funman.representation" [color="black", label=<funman.representation>, shape="box", style="solid"];
"funman.representation.representation" [color="black", label=<funman.representation.representation>, shape="box", style="solid"];
"funman.scenario" [color="black", label=<funman.scenario>, shape="box", style="solid"];
"funman.scenario.consistency" [color="black", label=<funman.scenario.consistency>, shape="box", style="solid"];
"funman.scenario.parameter_synthesis" [color="black", label=<funman.scenario.parameter_synthesis>, shape="box", style="solid"];
"funman.scenario.scenario" [color="black", label=<funman.scenario.scenario>, shape="box", style="solid"];
"funman.scenario.simulation" [color="black", label=<funman.scenario.simulation>, shape="box", style="solid"];
"funman.search" [color="black", label=<funman.search>, shape="box", style="solid"];
"funman.search.box_search" [color="black", label=<funman.search.box_search>, shape="box", style="solid"];
"funman.search.search" [color="black", label=<funman.search.search>, shape="box", style="solid"];
"funman.search.smt_check" [color="black", label=<funman.search.smt_check>, shape="box", style="solid"];
"funman.translate" [color="black", label=<funman.translate>, shape="box", style="solid"];
"funman.translate.bilayer" [color="black", label=<funman.translate.bilayer>, shape="box", style="solid"];
"funman.translate.decapode" [color="black", label=<funman.translate.decapode>, shape="box", style="solid"];
"funman.translate.encoded" [color="black", label=<funman.translate.encoded>, shape="box", style="solid"];
"funman.translate.gromet" [color="black", label=<funman.translate.gromet>, shape="box", style="solid"];
"funman.translate.translate" [color="black", label=<funman.translate.translate>, shape="box", style="solid"];
"funman.utils" [color="black", label=<funman.utils>, shape="box", style="solid"];
"funman.utils.handlers" [color="black", label=<funman.utils.handlers>, shape="box", style="solid"];
"funman.utils.math_utils" [color="black", label=<funman.utils.math_utils>, shape="box", style="solid"];
"funman.utils.smtlib_utils" [color="black", label=<funman.utils.smtlib_utils>, shape="box", style="solid"];
"funman" -> "funman" [arrowhead="open", arrowtail="none"];
"funman" -> "funman._version" [arrowhead="open", arrowtail="none"];
"funman.api" -> "funman.api" [arrowhead="open", arrowtail="none"];
"funman.api.api" -> "funman" [arrowhead="open", arrowtail="none"];
"funman.api.api" -> "funman.funman" [arrowhead="open", arrowtail="none"];
"funman.api.api" -> "funman.scenario" [arrowhead="open", arrowtail="none"];
"funman.api.api" -> "funman.scenario.consistency" [arrowhead="open", arrowtail="none"];
"funman.api.api" -> "funman.scenario.parameter_synthesis" [arrowhead="open", arrowtail="none"];
"funman.api.api" -> "funman.scenario.simulation" [arrowhead="open", arrowtail="none"];
"funman.funman" -> "funman.utils.handlers" [arrowhead="open", arrowtail="none"];
"funman.model" -> "funman.model" [arrowhead="open", arrowtail="none"];
"funman.model" -> "funman.model.bilayer" [arrowhead="open", arrowtail="none"];
"funman.model" -> "funman.model.encoded" [arrowhead="open", arrowtail="none"];
"funman.model" -> "funman.model.gromet" [arrowhead="open", arrowtail="none"];
"funman.model" -> "funman.model.query" [arrowhead="open", arrowtail="none"];
"funman.model" -> "funman.model.simulator" [arrowhead="open", arrowtail="none"];
"funman.model.bilayer" -> "funman.model" [arrowhead="open", arrowtail="none"];
"funman.model.bilayer" -> "funman.representation.representation" [arrowhead="open", arrowtail="none"];
"funman.model.bilayer" -> "funman.translate" [arrowhead="open", arrowtail="none"];
"funman.model.decapode" -> "funman.model.model" [arrowhead="open", arrowtail="none"];
"funman.model.decapode" -> "funman.translate.decapode" [arrowhead="open", arrowtail="none"];
"funman.model.encoded" -> "funman.model" [arrowhead="open", arrowtail="none"];
"funman.model.encoded" -> "funman.translate.encoded" [arrowhead="open", arrowtail="none"];
"funman.model.gromet" -> "funman.model" [arrowhead="open", arrowtail="none"];
"funman.model.simulator" -> "funman.model.model" [arrowhead="open", arrowtail="none"];
"funman.model.simulator" -> "funman.translate" [arrowhead="open", arrowtail="none"];
"funman.representation" -> "funman.representation" [arrowhead="open", arrowtail="none"];
"funman.representation.representation" -> "funman.constants" [arrowhead="open", arrowtail="none"];
"funman.representation.representation" -> "funman.utils.math_utils" [arrowhead="open", arrowtail="none"];
"funman.scenario" -> "funman.scenario" [arrowhead="open", arrowtail="none"];
"funman.scenario" -> "funman.scenario.consistency" [arrowhead="open", arrowtail="none"];
"funman.scenario" -> "funman.scenario.parameter_synthesis" [arrowhead="open", arrowtail="none"];
"funman.scenario.consistency" -> "funman.model.bilayer" [arrowhead="open", arrowtail="none"];
"funman.scenario.consistency" -> "funman.model.decapode" [arrowhead="open", arrowtail="none"];
"funman.scenario.consistency" -> "funman.model.encoded" [arrowhead="open", arrowtail="none"];
"funman.scenario.consistency" -> "funman.model.query" [arrowhead="open", arrowtail="none"];
"funman.scenario.consistency" -> "funman.scenario" [arrowhead="open", arrowtail="none"];
"funman.scenario.consistency" -> "funman.search.smt_check" [arrowhead="open", arrowtail="none"];
"funman.scenario.consistency" -> "funman.translate" [arrowhead="open", arrowtail="none"];
"funman.scenario.consistency" -> "funman.translate.translate" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.model" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.model.bilayer" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.model.decapode" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.model.encoded" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.model.query" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.representation" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.representation.representation" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.scenario" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.search.box_search" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.translate.translate" [arrowhead="open", arrowtail="none"];
"funman.scenario.parameter_synthesis" -> "funman.utils.math_utils" [arrowhead="open", arrowtail="none"];
"funman.scenario.scenario" -> "funman.utils.handlers" [arrowhead="open", arrowtail="none"];
"funman.scenario.simulation" -> "funman.model.model" [arrowhead="open", arrowtail="none"];
"funman.scenario.simulation" -> "funman.model.query" [arrowhead="open", arrowtail="none"];
"funman.scenario.simulation" -> "funman.model.simulator" [arrowhead="open", arrowtail="none"];
"funman.scenario.simulation" -> "funman.scenario" [arrowhead="open", arrowtail="none"];
"funman.search" -> "funman.representation.representation" [arrowhead="open", arrowtail="none"];
"funman.search" -> "funman.search" [arrowhead="open", arrowtail="none"];
"funman.search" -> "funman.search.box_search" [arrowhead="open", arrowtail="none"];
"funman.search" -> "funman.search.smt_check" [arrowhead="open", arrowtail="none"];
"funman.search.box_search" -> "funman.representation.representation" [arrowhead="open", arrowtail="none"];
"funman.search.box_search" -> "funman.search" [arrowhead="open", arrowtail="none"];
"funman.search.box_search" -> "funman.search.search" [arrowhead="open", arrowtail="none"];
"funman.search.box_search" -> "funman.utils.smtlib_utils" [arrowhead="open", arrowtail="none"];
"funman.search.search" -> "funman.funman" [arrowhead="open", arrowtail="none"];
"funman.search.search" -> "funman.scenario.scenario" [arrowhead="open", arrowtail="none"];
"funman.search.smt_check" -> "funman.search.search" [arrowhead="open", arrowtail="none"];
"funman.search.smt_check" -> "funman.utils.smtlib_utils" [arrowhead="open", arrowtail="none"];
"funman.translate" -> "funman.translate" [arrowhead="open", arrowtail="none"];
"funman.translate" -> "funman.translate.bilayer" [arrowhead="open", arrowtail="none"];
"funman.translate" -> "funman.translate.encoded" [arrowhead="open", arrowtail="none"];
"funman.translate" -> "funman.translate.gromet" [arrowhead="open", arrowtail="none"];
"funman.translate.bilayer" -> "funman.model.bilayer" [arrowhead="open", arrowtail="none"];
"funman.translate.bilayer" -> "funman.model.model" [arrowhead="open", arrowtail="none"];
"funman.translate.bilayer" -> "funman.representation" [arrowhead="open", arrowtail="none"];
"funman.translate.bilayer" -> "funman.representation.representation" [arrowhead="open", arrowtail="none"];
"funman.translate.bilayer" -> "funman.translate" [arrowhead="open", arrowtail="none"];
"funman.translate.decapode" -> "funman.translate.translate" [arrowhead="open", arrowtail="none"];
"funman.translate.encoded" -> "funman.model" [arrowhead="open", arrowtail="none"];
"funman.translate.encoded" -> "funman.model.encoded" [arrowhead="open", arrowtail="none"];
"funman.translate.encoded" -> "funman.translate" [arrowhead="open", arrowtail="none"];
"funman.translate.gromet" -> "funman.model" [arrowhead="open", arrowtail="none"];
"funman.translate.gromet" -> "funman.model.gromet" [arrowhead="open", arrowtail="none"];
"funman.translate.gromet" -> "funman.translate" [arrowhead="open", arrowtail="none"];
"funman.translate.translate" -> "funman.constants" [arrowhead="open", arrowtail="none"];
"funman.translate.translate" -> "funman.funman" [arrowhead="open", arrowtail="none"];
"funman.translate.translate" -> "funman.model.query" [arrowhead="open", arrowtail="none"];
"funman.translate.translate" -> "funman.representation" [arrowhead="open", arrowtail="none"];
"funman.translate.translate" -> "funman.representation.representation" [arrowhead="open", arrowtail="none"];
"funman.utils" -> "funman.utils.math_utils" [arrowhead="open", arrowtail="none"];
"funman.utils" -> "funman.utils.smtlib_utils" [arrowhead="open", arrowtail="none"];
"funman.utils.math_utils" -> "funman.constants" [arrowhead="open", arrowtail="none"];
}
